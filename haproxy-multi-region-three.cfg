## HAProxy Configuration for CockroachDB Cluster in Docker Swarm

### Global Settings
global
	log /dev/log local0
	log /dev/log local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# SSL Configuration (TLS 1.2 and 1.3)
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

### Defaults Block
defaults
	option dontlognull
	timeout connect 5s
	timeout client 10m
	timeout server 10m
	errorfile 400 /usr/local/etc/haproxy/errors/400.http
	errorfile 403 /usr/local/etc/haproxy/errors/403.http
	errorfile 408 /usr/local/etc/haproxy/errors/408.http
	errorfile 500 /usr/local/etc/haproxy/errors/500.http
	errorfile 502 /usr/local/etc/haproxy/errors/502.http
	errorfile 503 /usr/local/etc/haproxy/errors/503.http
	errorfile 504 /usr/local/etc/haproxy/errors/504.http

### Resolvers for Docker Swarm DNS
resolvers docker
	nameserver dns1 127.0.0.11:53
	resolve_retries 3
	timeout resolve 1s
	timeout retry 1s
	hold other 10s
	hold refused 10s
	hold nx 30s
	hold timeout 30s
	hold valid 10s

### HTTP Load Balancer for Admin Console
listen console
	bind :8080
	mode http
	option httplog
	balance roundrobin
	server roach-three-0 tasks.roach-three-0:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2
	server roach-three-1 tasks.roach-three-1:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2
	server roach-three-2 tasks.roach-three-2:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2
	server roach-one-0 tasks.roach-one-0:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-one-1 tasks.roach-one-1:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-one-2 tasks.roach-one-2:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-two-0 tasks.roach-two-0:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-two-1 tasks.roach-two-1:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-two-2 tasks.roach-two-2:8080 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup

### TCP Load Balancer for CockroachDB SQL and Inter-Node Traffic
listen roachcluster
	bind :26257
	mode tcp
	option tcplog
	option redispatch
	balance roundrobin
	server roach-three-0 tasks.roach-three-0:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2
	server roach-three-1 tasks.roach-three-1:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2
	server roach-three-2 tasks.roach-three-2:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2
	server roach-one-0 tasks.roach-one-0:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-one-1 tasks.roach-one-1:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-one-2 tasks.roach-one-2:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-two-0 tasks.roach-two-0:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-two-1 tasks.roach-two-1:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup
	server roach-two-2 tasks.roach-two-2:26257 check resolvers docker resolve-prefer ipv4 inter 3s fall 3 rise 2 backup

### Notes:
# - Uses Docker Swarm service discovery (tasks.*)
# - Admin UI balanced via HTTP
# - CockroachDB SQL port balanced via TCP
# - Suitable for development or basic production with dynamic DNS resolution
# - Uses HAProxy resolvers to support service recovery
# - Enables redispatch and sticky connections based on client IP
# - Extend with TLS passthrough, stick tables, or metrics if needed
